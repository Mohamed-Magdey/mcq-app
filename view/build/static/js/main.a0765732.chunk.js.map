{"version":3,"sources":["store/actions/questions.js","store/actions/user.js","components/End.js","containers/Test.js","containers/Mcq.js","reportWebVitals.js","store/reducers/user.js","store/reducers/index.js","store/reducers/questions.js","store/index.js","index.js"],"names":["removeAnswer","index","val","type","fetchQuestions","dispatch","method","path","process","Promise","resolve","reject","axios","data","then","res","catch","err","response","questions","console","log","increment","score","End","user","Grid","textAlign","style","height","verticalAlign","Column","Card","Content","header","name","background","Description","Test","useState","setIndex","answer","setAnswer","isSubmitted","setIsSubmitted","num","text","setText","count","setCount","useSelector","state","useDispatch","handleChange","e","value","Header","as","backgroundColor","marginBottom","padding","color","content","Container","Segment","Form","Field","question","_id","Group","answers","map","i","Radio","label","checked","onChange","Modal","size","dimmer","closeOnDimmerClick","trigger","Button","onClick","str","target","innerText","correct","preventDefault","Actions","Mcq","setName","useEffect","maxWidth","raised","Input","fluid","icon","iconPosition","placeholder","newUser","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","DEFAULT_STATE","rootReducer","combineReducers","action","filter","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a0765732.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const loadQuestions = questions => ({\r\n    type: \"LOAD_QUESTIONS\",\r\n    questions\r\n});\r\n\r\nexport const removeAnswer = (index, val) => ({\r\n    type: \"REMOVE_ANSWER\",\r\n    index,\r\n    val\r\n})\r\n\r\nfunction apiCall(method, path, data) {\r\n    return new Promise((resolve, reject) => {\r\n        return axios[method](path, data)\r\n            .then(res => {\r\n                return resolve(res.data)\r\n            })\r\n            .catch(err => {\r\n                return reject(err.response);\r\n            })\r\n    });\r\n}\r\n\r\nexport default function fetchQuestions() {\r\n    return dispatch => {\r\n        return apiCall(\"get\", process.env.REACT_APP_URL_API)\r\n            .then(res => dispatch(loadQuestions(res)))\r\n            .catch(err => console.log(\"Error: \" + err));\r\n    }\r\n}","export const newUser = name => ({\r\n    type: \"NEW_USER\",\r\n    name\r\n});\r\n\r\nexport const increment = score => ({\r\n    type: \"INCREMENT_SCORE\",\r\n    score\r\n})","import React from \"react\";\r\nimport {Card, Grid} from \"semantic-ui-react\";\r\n\r\nconst End = ({user}) => (\r\n    <Grid textAlign='center' style={{ height: '70vh' }} verticalAlign='middle'>\r\n        <Grid.Column>\r\n        <Card>\r\n            <Card.Content header={user.name} style={{background: '#009c95'}}/>\r\n            <Card.Content>\r\n                <Card.Description>\r\n                    Your score is {user.score}/10\r\n                </Card.Description>\r\n            </Card.Content>\r\n        </Card>\r\n        </Grid.Column>\r\n    </Grid>\r\n)\r\n\r\nexport default End;","import React, {useState} from \"react\";\r\nimport {Button, Container, Form, Header, Radio, Modal, Segment} from \"semantic-ui-react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {increment} from \"../store/actions/user\";\r\nimport End from '../components/End';\r\nimport {removeAnswer} from '../store/actions/questions';\r\n\r\nconst Test = () => {\r\n    const [index, setIndex] = useState(0),\r\n          [answer, setAnswer] = useState(''),\r\n          [isSubmitted, setIsSubmitted] = useState(false),\r\n          [text, setText] = useState({type: '', num: 0}),\r\n          [count, setCount] = useState(1);\r\n\r\n    const questions = useSelector(state => state.questions);\r\n    const user = useSelector(state => state.user);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleChange = (e, {value}) => {\r\n        setAnswer(value);\r\n    };\r\n\r\n    const handleNext = (e) => {\r\n        let str = {type: 'Wrong', num: 0};\r\n\r\n        if(e.target.innerText === 'Next') {\r\n            if(answer === questions[index].correct) {\r\n                if(count === 1) {\r\n                    dispatch(increment(user.score + 2));\r\n                    str.num = 2;\r\n                } else {\r\n                    dispatch(increment(user.score + 1));\r\n                    str.num = 1;\r\n                }\r\n                str.type = 'Correct'\r\n            }\r\n            if(str.type === 'Wrong' && count === 1) {\r\n                dispatch(removeAnswer(index, answer));\r\n                setText(str);\r\n                setCount(count - 1)\r\n            } else {\r\n                setIndex(index + 1);\r\n                setText(str);\r\n                setCount(1)\r\n            }\r\n        }\r\n\r\n        if(e.target.innerText === 'Submit') {\r\n            e.preventDefault();\r\n            if(answer === questions[index].correct) {\r\n                if(count === 1) {\r\n                    dispatch(increment(user.score + 2));\r\n                    str.type = 2;\r\n                } else {\r\n                    dispatch(increment(user.score + 1));\r\n                    str.num = 1;\r\n                }\r\n                str.type = 'Correct'\r\n            }\r\n            if(str.type === 'Wrong' && count === 1) {\r\n                dispatch(removeAnswer(index, answer));\r\n                setText(str);\r\n                setCount(count - 1)\r\n            } else {\r\n                setIsSubmitted(!isSubmitted);\r\n                setText(str);\r\n                setCount(1)\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    let style = {\r\n        h1: {\r\n            backgroundColor: '#009c95',\r\n            marginBottom: '2em',\r\n            padding: '0.5rem',\r\n            color: '#fff',\r\n        }\r\n    };\r\n\r\n    if(isSubmitted) {\r\n        return  <End user={user} />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' style={style.h1} content={`Welcome ${user.name}`} textAlign='center' />\r\n            <Container>\r\n                <Segment>\r\n                    <Form>\r\n                        <Form.Field key={questions[index]._id}>\r\n                            <b>Q{index}:</b> {questions[index].question}\r\n                            </Form.Field>\r\n                        <Segment.Group>\r\n                            {questions[index].answers.map((val, i) => (\r\n                                <Segment key={i}>\r\n                                    <Form.Field>\r\n                                        <Radio\r\n                                            label = {val}\r\n                                            name = 'radioGroup'\r\n                                            value = {val}\r\n                                            checked={answer === val}\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    </Form.Field>\r\n                                </Segment>\r\n                            ))}\r\n                            </Segment.Group>\r\n                        {answer && <Modal\r\n                            size='tiny'\r\n                            dimmer='inverted'\r\n                            closeOnDimmerClick={false}\r\n                            trigger={<Button color='teal'\r\n                                             size='medium'\r\n                                             onClick={handleNext}\r\n                                             content={index < 4 ? 'Next' : 'Submit'}\r\n                            />}\r\n                        >\r\n                            <Modal.Content>\r\n                                <p>{text.type}! Your score is: {text.type === 'Correct'? '+' : ''}{text.num}</p>\r\n                            </Modal.Content>\r\n                            <Modal.Actions>\r\n                                <Button onClick={() => setAnswer('')}>OK</Button>\r\n                            </Modal.Actions>\r\n                        </Modal>}\r\n                        </Form>\r\n                </Segment>\r\n            </Container>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Test;","import React, {useState, useEffect} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport fetchQuestions from '../store/actions/questions';\r\nimport { Button, Form, Grid, Header, Segment } from 'semantic-ui-react';\r\nimport {newUser} from \"../store/actions/user\";\r\nimport Test from './Test';\r\nimport './Mcq.css';\r\n\r\nconst Mcq = () => {\r\n    const [name, setName] = useState('');\r\n    const [isSubmitted, setIsSubmitted] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchQuestions());\r\n    }, []);\r\n\r\n\r\n    const handleInput = (e) => {\r\n        setName(e.target.value)\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(name) {\r\n            dispatch(newUser(name));\r\n            setIsSubmitted(!isSubmitted);\r\n            setName('')\r\n        }\r\n    };\r\n\r\n    if(isSubmitted) {\r\n        return <Test/>\r\n    }\r\n\r\n    return (\r\n        <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\r\n            <Grid.Column style={{ maxWidth: 450 }}>\r\n                <Header as='h1' content='MCQ APP' color='teal' textAlign='center'/>\r\n                <Form size='large'>\r\n                    <Segment raised>\r\n                        <Form.Input fluid icon='user' iconPosition='left'\r\n                                    placeholder='Enter Your Name'\r\n                                    onChange={handleInput}\r\n                        />\r\n                        <Button color='teal'\r\n                                fluid size='large'\r\n                                onClick={handleSubmit}\r\n                                content='Submit'\r\n                        />\r\n                    </Segment>\r\n                </Form>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n};\r\n\r\n\r\nexport default Mcq;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const DEFAULT_STATE = {\r\n    name: '',\r\n    score: 0\r\n}\r\n\r\nexport default (state=DEFAULT_STATE, action) => {\r\n    switch (action.type) {\r\n        case \"NEW_USER\":\r\n            return {...state, name: action.name}\r\n        case \"INCREMENT_SCORE\":\r\n            return {...state, score: action.score}\r\n        default:\r\n            return state\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport user from './user';\r\nimport questions from './questions';\r\n\r\nconst rootReducer = combineReducers({\r\n    user,\r\n    questions\r\n});\r\n\r\nexport default rootReducer;","export default (state=[], action) => {\r\n    switch (action.type) {\r\n        case \"LOAD_QUESTIONS\":\r\n            return [...action.questions];\r\n        case \"REMOVE_ANSWER\":\r\n            return state.map((question, i) =>\r\n                i === action.index\r\n                    ? {...question, answers: question.answers.filter(val => val !== action.val)}\r\n                    : question\r\n            )\r\n        default:\r\n            return state;\r\n    }\r\n}","import {applyMiddleware, compose, createStore} from 'redux';\r\nimport rootReducer from './reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport function configureStore() {\r\n    return createStore(\r\n        rootReducer,\r\n        composeEnhancer(applyMiddleware(thunk))\r\n    );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport './index.css';\r\nimport Mcq from './containers/Mcq';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {configureStore} from \"./store\";\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Mcq />\r\n      </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}